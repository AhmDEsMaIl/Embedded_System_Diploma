/*
 * GccApplication12.c
 *
 * Created: 11/2/2022 2:43:34 PM
 * Author : ahmed
 */ 

#include "MemMap.h"
#include "Utiles.h"
#include "StdTypes.h"
#include "DIO_interface.h"
#include "Motor_interface.h"
#include "Motor_cfg.h"
#include "LCD.h"
#include "ADC.h"
#include "LED.h"
#include "Sensors.h"
#include "Temp_Filter.h"
#include "Buzzer.h"
#include <util/delay.h>
#define CPU_F     8000000

#include "Keypad.h"

int main(void)
{
    /* Replace with your application code */
	DIO_Init();
	LCD_Init();
	KEYPAD_Init();
	ADC_Init(VREF_AVCC,ADC_SCALER_64);
    Temp_FilterInit();
	const u16 Password=1953;
	u16 T=0,P=0,num=0;   /// T is for Temp variable  /  P is for pressure variable / num is variable to put on it reading from keypad 
	u8 K=0,i=5,TOG=1;   /// K is keypad variable which put every character push on keypad to get password user from user
    while (1)          /// TOG is variable which make while(1) of FIRE state to be true or false  according\ depending to password 
    {                 ///    is it true or false  
	   T=Temp_Read();
	   P=PRESS_Read();
	   LCD_SetCursor(0,0);
	   LCD_WriteString("TEMP:");
	   LCD_WriteNumber(T/10);    //  dividing by 10 to get first numb or tow which is ten num  or num before decimal point 
	   LCD_WriteChar('.');
	   LCD_WriteNumber(T%10);    // remaindering by 10 to get fractional numb or numb after decimal point 
	   LCD_WriteChar('C');
	   LCD_Clear_With_Began(0,0,3); // to print 3 spaces on LCD to remove repeated character that cause by while(1)
	   if(T<500 && P<575)     // to not burn out LED and Motor when user enter Password but Temp in above 500\50C and Press is 
	   {                      //   is above 575\57.5Pa i make condition if not Temp less than 500 and Press not less than 575
	   LED_OFF(1);            //   and Pass is correct and Big While(1) in main began again LED and Motor and Buzzer                              
	   LED_OFF(2);           //    will still turn on  and program will enter small while(1) of If condition of Temp because 
	   LED_OFF(3);           //   Temp is more than 500 and Press is more than 575 so this condition will not let them turn  off     
	   Motor_off_relay1_cw(); // before Temp is less than 500 and press is less than 575
	   Buzzer_OFF();
	   }
	   if(T>500)   // condition to check Temp 
	   {
		 if(P>575) // condition to check Press
		 {
			 TOG=1;
			 LCD_Clear();   // clear LCD before enter FIRE State so i can write so free space in lCD to Put Pass '*'
			 while(1&&TOG)  // and put FIRE in another place in LCD and put sentence of "PLZ Enter Pass " in Top of screen
			 { 
				 
			K=KEYPAD_GetKey();  // to take return and check on it 
			if(K!=NO_KEY)
			{
				if(K>='0' && K<='9')
				{
					num=num*10+(K-'0');
					LCD_SetCursor(1,i);  // i is variable to set by 5 to make LCD began on cell num 5 and increase with every char
					LCD_WriteChar('*');
					i++;
					
				}
				
			}
			LCD_SetCursor(0,0);
			LCD_WriteString("PLZ ENTER PASS /");
		    LCD_SetCursor(1,0);
			LCD_WriteString("FIRE:");
			LED_ON(3);
			LED_OFF(1);
			LED_OFF(2); 
			Motor_on_relay1_cw();
            Buzzer_On();
			if((K=='=')&& (num==Password))
			{
				LCD_Clear();                   // clear LCD to can put my new sentence in LCD
				LCD_WriteString("CORRECT PASS");
				_delay_ms(5000);             // delay so user can see sentence
				LCD_Clear();
				num=0;                      // make num with 0 to user can put another num when enter while(1) again if Pass is true
                i=5;                        // i is set by 5 to when enter while(1) again if Pass is true
				TOG=0;	                    // TOG set by 0 so i can break while (1) as  condition is  1  anded with TOG if TOG is 0 
			}                               //  while will break
			else if((K=='=')&& (num!=Password))
			{
				LCD_Clear();
				LCD_WriteString("WRONG PASS");
				_delay_ms(5000);
				LCD_Clear();
				num=0;           // make num with 0 to user can put another num when enter while(1) again if Pass is true
				i=5;             // i is set by 5 to make user enter pass in same place on LCD
				TOG=1;	         // TOG set by 1 so while contain as it is 
			}
			
			 }
		 }
		 if(P<500)         //   if Press is under 500  and Temp is more than 500 so turn yellow LED on 2 and put word HOT on LCD  
		 {                 // and turn off Motor and two another LED which is red and Green and Buzzer because Press less than 450 
			 LCD_SetCursor(1,6);             // and Temp is more than 500
			 LCD_WriteString("HOT");
			 LCD_Clear_With_Began(0,0,3);
			 LED_ON(2);
			 LED_OFF(1);
			 LED_OFF(3);
			 Motor_off_relay1_cw();
			 Buzzer_OFF();
		 }
	   }
	   else if(T<450)        //   if Press is under 500  and Temp under 500 so turn green LED on 1 and put word FNE on LCD  
	   {                     // and turn off Motor and two another LED which is red and yellow and Buzzer because Temp less than 450 
		   LCD_SetCursor(1,6);
		   LCD_WriteString("FINE");
		   LCD_Clear_With_Began(0,0,3);
		   LED_ON(1);
		   LED_OFF(2);
		   LED_OFF(3);
		   Motor_off_relay1_cw();
		   Buzzer_OFF();

	   }
     }
}




 * GccApplication12.c
 *
 * Created: 11/2/2022 2:43:34 PM
 * Author : ahmed
 */ 

#include "MemMap.h"
#include "Utiles.h"
#include "StdTypes.h"
#include "DIO_interface.h"
#include "Motor_interface.h"
#include "Motor_cfg.h"
#include "LCD.h"
#include "ADC.h"
#include "LED.h"
#include "Sensors.h"
#include "Temp_Filter.h"
#include "Buzzer.h"
#include "Interrupt.h"
#include "NVM.h"
#include "Timer.h"
#include "RGB.h"
#include "Timer_Services.h"
#include "ULTRASONIC.h"
#include "Fire System.h"
#define F_CPU     8000000
#include <util/delay.h>
#define Global_Enable   sei
#include "Keypad.h"
// static volatile u16 dis=0;
// u16 T,P;
// u16 pass=1958;  

// volatile u16 x=0 ,num;
// u8 interput_timer=0,i;

// static volatile u16 NVM_interput_flag1,NVM_interput_flag2,n;
// static const u16 pass=1953;

u16 T=0,P=0;

int main(void)
{
	
	/*Replace with your application code */
    	INIT();
	
		while(1)
		{
		LDR_ON();
        change_pass();
	    LCD_INIT();
	    P=PRESS_Read();
		T=Temp_Read();
	   if(T<500 && P<575)     // to not burn out LED and Motor when user enter Password but Temp in above 500\50C and Press is
	   {                      //   is above 575\57.5Pa i make condition if not Temp less than 500 and Press not less than 575
		  TEMP_PRESS_CRITICAL();
	   }
	   if(T>500)   // condition to check Temp
	   {
		   if(P>575) // condition to check Press
		   {
			   High_TEMP_HIGH_PRESS();
				   
			   
		   }
		   if(P<500)         //   if Press is under 500  and Temp is more than 500 so turn yellow LED on 2 and put word HOT on LCD
		   {                 // and turn off Motor and two another LED which is red and Green and Buzzer because Press less than 450
			   High_TEMP_LOW_PRESS();
		   }
	   }
	   else if(T<450)        //   if Press is under 500  and Temp under 500 so turn green LED on 1 and put word FNE on LCD
	   {                     // and turn off Motor and two another LED which is red and yellow and Buzzer because Temp less than 450
		   LOW_TEMP();

	   }
}
	
		
}

#include "StdTypes.h"
#include "LCD.h"
#include "ADC.h"
#include "LED.h"
#include "Sensors.h"
#include "Timer.h"
#include "Buzzer.h"
#include "Fire System.h"
#define Global_Enable   sei
#include "Keypad.h"
#include "Stepper_Motor.h"
#define F_CPU     8000000
#include <util/delay.h>
static u16 adc=0,adc_zero=0,num=0;
static  u16 Password=1953;
static u8 K=0,i=5,TOG=1;
 extern u16 T,P;
static u16 pass;
static volatile u16 NVM_interput_flag1,NVM_interput_flag2,n;
  static volatile u16 x ,numb;
 static u8 interput_timer,i;
static u16 local_pass,Switch_flag,temp, Enter_Change_Fun;
	
void f7()
{
	static u8 counter=0;
	if(NVM_interput_flag1==0)
	{
		NVM_Write(1,(u8)(x>>8));
		NVM_interput_flag1=1;
		LCD_SetCursor(1,10);
		LCD_WriteNumber(x);
		
	}
	else if (NVM_interput_flag1==1)
	{
		
		NVM_Interput_Off();
	}
	if(NVM_interput_flag2==0)
	{
		n=NVM_Read(1);
		NVM_interput_flag1=1;;
		
	}
	else
	{
		
		NVM_Interput_Off();
	}
	counter++;
	
}

void f9()
{
	static u16 count=0;
	if(count==100)
	{
		interput_timer=0;
		LCD_SetCursor(3,5);
		LCD_WriteString("Time Pass");
		LCD_Clear();
	}
	count++;
	
}
void INIT()
{
	pass=1958;
	NVM_interput_flag1=0;
	NVM_interput_flag2=0;
	interput_timer=0;
	Switch_flag=0;
	DIO_Init();
	LCD_Init();
	KEYPAD_Init();
	ADC_Init(VREF_AVCC,ADC_SCALER_64);
	Temp_FilterInit();
	/*EXI_Enable(EX_INT0);
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
	EXI_Enable(EX_INT1);
	EXI_TriggerEdge(EX_INT0,RISING_EDGE);*/
 	TIMER0_Init(TIMER0_FASTPWM_MODE,TIMER0_SCALER_8);
	TIMER0_OC0Mode(OC0_INVERTING);
	Timer1_Init(TIMER1_FASTPWM_ICR_TOP_MODE,TIMER1_SCALER_8);
	Timer1_OCRA1Mode(OCRA_DISCONNECTED);
	Timer1_OCRB1Mode(OCRB_DISCONNECTED);
	/*TIMER2_Init(TIMER2_NORMAL_MODE,TIMER2_SCALER_8);
	TIMER2_OC2Mode(OC2_DISCONNECTED);*/
	/*Four_UltraSonic_Init();
	TIMER2_OV_InterruptEnable();*/
	TCNT0=0;
	Global_Enable();
	local_pass=pass;

	local_pass= NVM_Read(0);
	EEPROM_SetCallBack(f7);
	NVM_interput_flag2=0;
	NVM_interput_flag1=3;
	NVM_Interput_ON();
	local_pass=((local_pass) | (u16)(n<<8) );
}
void LDR_ON()
{
	adc=ADC_Read(CH_2);
	adc_zero=(adc/4)-2;
	OCR0=255-adc_zero;
}
void change_pass()
{
	do
	{
	if(interput_timer==0)
	{
		K=KEYPAD_GetKey();
	}
	
	if(K!=NO_KEY && interput_timer==0)
	{
		
		if(K>='0' && K<='9')
		{
			numb=numb*10+(K-'0');
			LCD_SetCursor(1,i);  // i is variable to set by 5 to make LCD began on cell num 5 and increase with every char
			LCD_WriteChar('*');
			i++;
		}
		if(K=='c')
		{
			Enter_Change_Fun=1;
			LCD_Clear();
			LCD_SetCursor(0,0);
			LCD_WriteString("PLZ enter old pass");
			
		}
		
		if(K=='=' && Switch_flag==0)
		{
			LCD_Clear();				
			if(numb==local_pass)
			{
				LCD_SetCursor(0,0);
				LCD_WriteString("PLZ enter new pass");
				K=0;
				numb=0;
				Switch_flag=1;
// 				LCD_SetCursor(1,0);
// 				LCD_WriteNumber(local_pass);
			}
			
			else
			{
				numb=0;
				K=0;
				Switch_flag=0;
				TIMER2_Init(TIMER2_NORMAL_MODE,TIMER2_SCALER_8);
				Timer2_OVF_SetCallBack(f9);
				TIMER2_OV_InterruptEnable();
				interput_timer=1;
				LCD_SetCursor(0,0);
				LCD_WriteString("pass wrong");
				LCD_SetCursor(1,0);
				LCD_WriteString("PLZenterwait1sec");
				_delay_ms(2000);
				LCD_Clear();
				Enter_Change_Fun=0;
				
			}
			
		}
		else if(K=='=' && Switch_flag==1)
		{
			LCD_Clear();
			LCD_SetCursor(0,0);
			LCD_WriteString("Pass Updated");
			LCD_SetCursor(1,0);
			LCD_WriteString("NEW Pass");
			x=numb;
			NVM_Write(0,(u8)(x));
			NVM_interput_flag1=0;
			NVM_Interput_ON();
			Switch_flag=0;
			_delay_ms(1000);
			LCD_Clear();
			Enter_Change_Fun=0;
		}
	}
	}
	while(Enter_Change_Fun==1);
}
void LCD_INIT()
{
	if(Enter_Change_Fun==0)
	{
		
	LCD_SetCursor(0,0);
	LCD_WriteString("TEMP:");
	LCD_WriteNumber(T/10);    //  dividing by 10 to get first numb or tow which is ten num  or num before decimal point
	LCD_WriteChar('.');
	LCD_WriteNumber(T%10);    // remaindering by 10 to get fractional numb or numb after decimal point
	LCD_WriteChar('C');
	LCD_Clear_With_Began(0,0,3);
	}
}
void TEMP_PRESS_CRITICAL()
{
	LED_ON(1);            //   and Pass is correct and Big While(1) in main began again LED and Motor and Buzzer
	LED_OFF(2);           //    will still turn on  and program will enter small while(1) of If condition of Temp because
	LED_OFF(3);           //   Temp is more than 500 and Press is more than 575 so this condition will not let them turn  off
	Stepper_Unipoler_CW_OFF();// before Temp is less than 500 and press is less than 575
	Buzzer_OFF();
	Fan_On();
	LCD_SetCursor(3,0);
	LCD_WriteString("aaa");
}
void High_TEMP_HIGH_PRESS()
{
	TOG=1;
	Password=local_pass;
	LCD_Clear();   // clear LCD before enter FIRE State so i can write so free space in lCD to Put Pass '*'
	while(1&&TOG)  // and put FIRE in another place in LCD and put sentence of "PLZ Enter Pass " in Top of screen
	{
		
		K=KEYPAD_GetKey();  // to take return and check on it
		if(K!=NO_KEY)
		{
			if(K>='0' && K<='9')
			{
				num=num*10+(K-'0');
				LCD_SetCursor(1,i);  // i is variable to set by 5 to make LCD began on cell num 5 and increase with every char
				LCD_WriteChar('*');
				i++;
				
			}
			
		}
		LCD_SetCursor(0,0);
		LCD_WriteString("PLZ ENTER PASS /");
		LCD_SetCursor(1,0);
		LCD_WriteString("FIRE:");
		LED_ON(3);
		LED_OFF(1);
		LED_OFF(2);
		Stepper_Unipoler_CW_Interput();
		Buzzer_On();
		Fan_On();
		if((K=='=')&& (num==Password))
		{
			LCD_Clear();                   // clear LCD to can put my new sentence in LCD
			LCD_WriteString("CORRECT PASS");
			_delay_ms(500);             // delay so user can see sentence
			LCD_Clear();
			num=0;                      // make num with 0 to user can put another num when enter while(1) again if Pass is true
			i=5;                        // i is set by 5 to when enter while(1) again if Pass is true
			TOG=0;	                    // TOG set by 0 so i can break while (1) as  condition is  1  anded with TOG if TOG is 0
		}                               //  while will break
		else if((K=='=')&& (num!=Password))
		{
			LCD_Clear();
			LCD_WriteString("WRONG PASS");
			_delay_ms(500);
			LCD_Clear();
			num=0;           // make num with 0 to user can put another num when enter while(1) again if Pass is true
			i=5;             // i is set by 5 to make user enter pass in same place on LCD
			TOG=1;	         // TOG set by 1 so while contain as it is
		}
}
	}
void High_TEMP_LOW_PRESS()
{
	LCD_SetCursor(1,6);             // and Temp is more than 500
	LCD_WriteString("HOT");
	LCD_Clear_With_Began(0,0,3);
	LED_ON(2);
	LED_OFF(1);
	LED_OFF(3);
	Stepper_Unipoler_CW_OFF();
	Buzzer_OFF();
	Fan_On();
}
void LOW_TEMP()
{
				LCD_SetCursor(1,6);
				LCD_WriteString("FINE");
				LCD_Clear_With_Began(0,0,3);
				LED_ON(1);
				LED_OFF(2);
				LED_OFF(3);
				Stepper_Unipoler_CW_OFF();
				Buzzer_OFF();
				Fan_OFF();

}
void High_PRESS()
{
	LCD_SetCursor(1,6);             // and Temp is more than 500
	LCD_WriteString("HOT");
	LCD_Clear_With_Began(0,0,3);
	LED_ON(2);
	LED_OFF(1);
	LED_OFF(3);
	Stepper_Unipoler_CW_OFF();
	Buzzer_OFF();
}




