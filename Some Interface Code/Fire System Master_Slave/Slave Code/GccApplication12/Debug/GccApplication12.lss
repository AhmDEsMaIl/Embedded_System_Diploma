
GccApplication12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000e1c  00000eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800096  00800096  00000ee6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000490  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003750  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001361  00000000  00000000  00004b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002007  00000000  00000000  00005e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c9c  00000000  00000000  00007e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013aa  00000000  00000000  00008b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e1c  00000000  00000000  00009ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0000ccfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__vector_1>
   8:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_2>
   c:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__vector_3>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__vector_5>
  18:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__vector_6>
  1c:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_7>
  20:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__vector_8>
  24:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__vector_9>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__vector_11>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__vector_13>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__vector_15>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	ea 01       	movw	r28, r20
  56:	ee 01       	movw	r28, r28
  58:	f2 01       	movw	r30, r4
  5a:	f6 01       	movw	r30, r12
  5c:	fa 01       	movw	r30, r20
  5e:	fe 01       	movw	r30, r28
  60:	02 02       	muls	r16, r18
  62:	06 02       	muls	r16, r22
  64:	0a 02       	muls	r16, r26
  66:	0e 02       	muls	r16, r30
  68:	12 02       	muls	r17, r18
  6a:	16 02       	muls	r17, r22
  6c:	1a 02       	muls	r17, r26
  6e:	1e 02       	muls	r17, r30
  70:	22 02       	muls	r18, r18
  72:	26 02       	muls	r18, r22
  74:	35 02       	muls	r19, r21
  76:	39 02       	muls	r19, r25
  78:	3d 02       	muls	r19, r29
  7a:	41 02       	muls	r20, r17
  7c:	45 02       	muls	r20, r21
  7e:	49 02       	muls	r20, r25
  80:	4d 02       	muls	r20, r29
  82:	51 02       	muls	r21, r17
  84:	55 02       	muls	r21, r21
  86:	59 02       	muls	r21, r25
  88:	5d 02       	muls	r21, r29
  8a:	61 02       	muls	r22, r17
  8c:	65 02       	muls	r22, r21
  8e:	69 02       	muls	r22, r25
  90:	6d 02       	muls	r22, r29
  92:	71 02       	muls	r23, r17

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d8 e0       	ldi	r29, 0x08	; 8
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	ec e1       	ldi	r30, 0x1C	; 28
  a8:	fe e0       	ldi	r31, 0x0E	; 14
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a6 39       	cpi	r26, 0x96	; 150
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	a6 e9       	ldi	r26, 0x96	; 150
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	ae 3a       	cpi	r26, 0xAE	; 174
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <main>
  ca:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <Temp_FilterInit>:
 #include "Temp_Filter.h"
 static u8 arr[10]={0};
 static u16 Tempfiltered=0;
void Temp_FilterInit(void)
{
	Tempfiltered=Temp_Read();
  d2:	0e 94 75 02 	call	0x4ea	; 0x4ea <Temp_Read>
  d6:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0x1>
  da:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end>
  de:	08 95       	ret

000000e0 <KEYPAD_Init>:
							    {'1','2','3','-'},
						    	{'c','0','=','+'}};
/*****************************************************************************/
void KEYPAD_Init(void)
{
	DIO_WritePin(FIRST_OUT,HIGH);
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	8c e0       	ldi	r24, 0x0C	; 12
  e4:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
	DIO_WritePin(FIRST_OUT+1,HIGH);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
	DIO_WritePin(FIRST_OUT+2,HIGH);
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	8e e0       	ldi	r24, 0x0E	; 14
  f4:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
	DIO_WritePin(FIRST_OUT+3,HIGH);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	8f e0       	ldi	r24, 0x0F	; 15
  fc:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 100:	08 95       	ret

00000102 <WriteIns>:
{
	u8 arr[][8]={{0xff,0x0f,0x65,0xc4,0xb7,0xa9,0xe7,0xff}};
      WriteIns(0x40);
	  WriteData(arr);

}
 102:	cf 93       	push	r28
 104:	c8 2f       	mov	r28, r24
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 10e:	6c 2f       	mov	r22, r28
 110:	66 1f       	adc	r22, r22
 112:	66 27       	eor	r22, r22
 114:	66 1f       	adc	r22, r22
 116:	86 e0       	ldi	r24, 0x06	; 6
 118:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 11c:	c6 fb       	bst	r28, 6
 11e:	66 27       	eor	r22, r22
 120:	60 f9       	bld	r22, 0
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 128:	c5 fb       	bst	r28, 5
 12a:	66 27       	eor	r22, r22
 12c:	60 f9       	bld	r22, 0
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 134:	c4 fb       	bst	r28, 4
 136:	66 27       	eor	r22, r22
 138:	60 f9       	bld	r22, 0
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 148:	8f ec       	ldi	r24, 0xCF	; 207
 14a:	97 e0       	ldi	r25, 0x07	; 7
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <WriteIns+0x4a>
 150:	00 c0       	rjmp	.+0      	; 0x152 <WriteIns+0x50>
 152:	00 00       	nop
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 15c:	8f ec       	ldi	r24, 0xCF	; 207
 15e:	97 e0       	ldi	r25, 0x07	; 7
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <WriteIns+0x5e>
 164:	00 c0       	rjmp	.+0      	; 0x166 <WriteIns+0x64>
 166:	00 00       	nop
 168:	c3 fb       	bst	r28, 3
 16a:	66 27       	eor	r22, r22
 16c:	60 f9       	bld	r22, 0
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 174:	c2 fb       	bst	r28, 2
 176:	66 27       	eor	r22, r22
 178:	60 f9       	bld	r22, 0
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 180:	c1 fb       	bst	r28, 1
 182:	66 27       	eor	r22, r22
 184:	60 f9       	bld	r22, 0
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 18c:	6c 2f       	mov	r22, r28
 18e:	61 70       	andi	r22, 0x01	; 1
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 19e:	8f ec       	ldi	r24, 0xCF	; 207
 1a0:	97 e0       	ldi	r25, 0x07	; 7
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <WriteIns+0xa0>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <WriteIns+0xa6>
 1a8:	00 00       	nop
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 1b2:	8f ec       	ldi	r24, 0xCF	; 207
 1b4:	97 e0       	ldi	r25, 0x07	; 7
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <WriteIns+0xb4>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <WriteIns+0xba>
 1bc:	00 00       	nop
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <WriteData>:
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 1ce:	6c 2f       	mov	r22, r28
 1d0:	66 1f       	adc	r22, r22
 1d2:	66 27       	eor	r22, r22
 1d4:	66 1f       	adc	r22, r22
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 1dc:	c6 fb       	bst	r28, 6
 1de:	66 27       	eor	r22, r22
 1e0:	60 f9       	bld	r22, 0
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 1e8:	c5 fb       	bst	r28, 5
 1ea:	66 27       	eor	r22, r22
 1ec:	60 f9       	bld	r22, 0
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 1f4:	c4 fb       	bst	r28, 4
 1f6:	66 27       	eor	r22, r22
 1f8:	60 f9       	bld	r22, 0
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 208:	8f ec       	ldi	r24, 0xCF	; 207
 20a:	97 e0       	ldi	r25, 0x07	; 7
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <WriteData+0x4a>
 210:	00 c0       	rjmp	.+0      	; 0x212 <WriteData+0x50>
 212:	00 00       	nop
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 21c:	8f ec       	ldi	r24, 0xCF	; 207
 21e:	97 e0       	ldi	r25, 0x07	; 7
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <WriteData+0x5e>
 224:	00 c0       	rjmp	.+0      	; 0x226 <WriteData+0x64>
 226:	00 00       	nop
 228:	c3 fb       	bst	r28, 3
 22a:	66 27       	eor	r22, r22
 22c:	60 f9       	bld	r22, 0
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 234:	c2 fb       	bst	r28, 2
 236:	66 27       	eor	r22, r22
 238:	60 f9       	bld	r22, 0
 23a:	85 e0       	ldi	r24, 0x05	; 5
 23c:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 240:	c1 fb       	bst	r28, 1
 242:	66 27       	eor	r22, r22
 244:	60 f9       	bld	r22, 0
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 24c:	6c 2f       	mov	r22, r28
 24e:	61 70       	andi	r22, 0x01	; 1
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 25e:	8f ec       	ldi	r24, 0xCF	; 207
 260:	97 e0       	ldi	r25, 0x07	; 7
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <WriteData+0xa0>
 266:	00 c0       	rjmp	.+0      	; 0x268 <WriteData+0xa6>
 268:	00 00       	nop
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
 272:	8f ec       	ldi	r24, 0xCF	; 207
 274:	97 e0       	ldi	r25, 0x07	; 7
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <WriteData+0xb4>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <WriteData+0xba>
 27c:	00 00       	nop
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <LCD_Init>:
 282:	2f e7       	ldi	r18, 0x7F	; 127
 284:	88 e3       	ldi	r24, 0x38	; 56
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <LCD_Init+0x6>
 290:	00 c0       	rjmp	.+0      	; 0x292 <LCD_Init+0x10>
 292:	00 00       	nop
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
 29a:	88 e2       	ldi	r24, 0x28	; 40
 29c:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
 2a0:	8c e0       	ldi	r24, 0x0C	; 12
 2a2:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
 2ac:	8f ec       	ldi	r24, 0xCF	; 207
 2ae:	97 e0       	ldi	r25, 0x07	; 7
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_Init+0x2e>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_Init+0x34>
 2b6:	00 00       	nop
 2b8:	86 e0       	ldi	r24, 0x06	; 6
 2ba:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
 2be:	08 95       	ret

000002c0 <LCD_WriteChar>:
 2c0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <WriteData>
 2c4:	08 95       	ret

000002c6 <LCD_WriteNumber>:
 2c6:	cf 92       	push	r12
 2c8:	df 92       	push	r13
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	2a 97       	sbiw	r28, 0x0a	; 10
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
 2e4:	6b 01       	movw	r12, r22
 2e6:	7c 01       	movw	r14, r24
 2e8:	61 15       	cp	r22, r1
 2ea:	71 05       	cpc	r23, r1
 2ec:	81 05       	cpc	r24, r1
 2ee:	91 05       	cpc	r25, r1
 2f0:	21 f4       	brne	.+8      	; 0x2fa <LCD_WriteNumber+0x34>
 2f2:	80 e3       	ldi	r24, 0x30	; 48
 2f4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_WriteChar>
 2f8:	3b c0       	rjmp	.+118    	; 0x370 <LCD_WriteNumber+0xaa>
 2fa:	99 23       	and	r25, r25
 2fc:	5c f4       	brge	.+22     	; 0x314 <LCD_WriteNumber+0x4e>
 2fe:	8d e2       	ldi	r24, 0x2D	; 45
 300:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_WriteChar>
 304:	f0 94       	com	r15
 306:	e0 94       	com	r14
 308:	d0 94       	com	r13
 30a:	c0 94       	com	r12
 30c:	c1 1c       	adc	r12, r1
 30e:	d1 1c       	adc	r13, r1
 310:	e1 1c       	adc	r14, r1
 312:	f1 1c       	adc	r15, r1
 314:	10 e0       	ldi	r17, 0x00	; 0
 316:	17 c0       	rjmp	.+46     	; 0x346 <LCD_WriteNumber+0x80>
 318:	c7 01       	movw	r24, r14
 31a:	b6 01       	movw	r22, r12
 31c:	2a e0       	ldi	r18, 0x0A	; 10
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__divmodsi4>
 328:	e1 e0       	ldi	r30, 0x01	; 1
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	ec 0f       	add	r30, r28
 32e:	fd 1f       	adc	r31, r29
 330:	e1 0f       	add	r30, r17
 332:	f1 1d       	adc	r31, r1
 334:	17 fd       	sbrc	r17, 7
 336:	fa 95       	dec	r31
 338:	60 5d       	subi	r22, 0xD0	; 208
 33a:	60 83       	st	Z, r22
 33c:	c2 2e       	mov	r12, r18
 33e:	d3 2e       	mov	r13, r19
 340:	e4 2e       	mov	r14, r20
 342:	f5 2e       	mov	r15, r21
 344:	1f 5f       	subi	r17, 0xFF	; 255
 346:	c1 14       	cp	r12, r1
 348:	d1 04       	cpc	r13, r1
 34a:	e1 04       	cpc	r14, r1
 34c:	f1 04       	cpc	r15, r1
 34e:	21 f7       	brne	.-56     	; 0x318 <LCD_WriteNumber+0x52>
 350:	11 50       	subi	r17, 0x01	; 1
 352:	0c c0       	rjmp	.+24     	; 0x36c <LCD_WriteNumber+0xa6>
 354:	e1 e0       	ldi	r30, 0x01	; 1
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	ec 0f       	add	r30, r28
 35a:	fd 1f       	adc	r31, r29
 35c:	e1 0f       	add	r30, r17
 35e:	f1 1d       	adc	r31, r1
 360:	17 fd       	sbrc	r17, 7
 362:	fa 95       	dec	r31
 364:	80 81       	ld	r24, Z
 366:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_WriteChar>
 36a:	11 50       	subi	r17, 0x01	; 1
 36c:	1f 3f       	cpi	r17, 0xFF	; 255
 36e:	91 f7       	brne	.-28     	; 0x354 <LCD_WriteNumber+0x8e>
 370:	2a 96       	adiw	r28, 0x0a	; 10
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	f8 94       	cli
 376:	de bf       	out	0x3e, r29	; 62
 378:	0f be       	out	0x3f, r0	; 63
 37a:	cd bf       	out	0x3d, r28	; 61
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	df 90       	pop	r13
 388:	cf 90       	pop	r12
 38a:	08 95       	ret

0000038c <LCD_WriteString>:
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	8c 01       	movw	r16, r24
 394:	c0 e0       	ldi	r28, 0x00	; 0
 396:	03 c0       	rjmp	.+6      	; 0x39e <LCD_WriteString+0x12>
 398:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_WriteChar>
 39c:	cf 5f       	subi	r28, 0xFF	; 255
 39e:	f8 01       	movw	r30, r16
 3a0:	ec 0f       	add	r30, r28
 3a2:	f1 1d       	adc	r31, r1
 3a4:	80 81       	ld	r24, Z
 3a6:	81 11       	cpse	r24, r1
 3a8:	f7 cf       	rjmp	.-18     	; 0x398 <LCD_WriteString+0xc>
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	08 95       	ret

000003b2 <LCD_SetCursor>:
void LCD_SetCursor(u8 line ,u8 cell)
{
	
	switch(line)
 3b2:	88 23       	and	r24, r24
 3b4:	21 f0       	breq	.+8      	; 0x3be <LCD_SetCursor+0xc>
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	09 f4       	brne	.+2      	; 0x3bc <LCD_SetCursor+0xa>
 3ba:	4c c0       	rjmp	.+152    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3bc:	08 95       	ret
	{
		case 0:
		switch(cell)
 3be:	86 2f       	mov	r24, r22
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	80 31       	cpi	r24, 0x10	; 16
 3c4:	91 05       	cpc	r25, r1
 3c6:	08 f0       	brcs	.+2      	; 0x3ca <LCD_SetCursor+0x18>
 3c8:	8f c0       	rjmp	.+286    	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 3ca:	fc 01       	movw	r30, r24
 3cc:	e6 5d       	subi	r30, 0xD6	; 214
 3ce:	ff 4f       	sbci	r31, 0xFF	; 255
 3d0:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__tablejump2__>
		{
			case 0:
			WriteIns(0x80);
 3d4:	80 e8       	ldi	r24, 0x80	; 128
 3d6:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 3da:	08 95       	ret
			case 1:
			WriteIns(0x81);
 3dc:	81 e8       	ldi	r24, 0x81	; 129
 3de:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 3e2:	08 95       	ret
			case 2:
			WriteIns(0x82);
 3e4:	82 e8       	ldi	r24, 0x82	; 130
 3e6:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 3ea:	08 95       	ret
			case 3:
			WriteIns(0x83);
 3ec:	83 e8       	ldi	r24, 0x83	; 131
 3ee:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 3f2:	08 95       	ret
			case 4:
			WriteIns(0x84);
 3f4:	84 e8       	ldi	r24, 0x84	; 132
 3f6:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 3fa:	08 95       	ret
			case 5:
			WriteIns(0x85);
 3fc:	85 e8       	ldi	r24, 0x85	; 133
 3fe:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 402:	08 95       	ret
			case 6:
			WriteIns(0x86);
 404:	86 e8       	ldi	r24, 0x86	; 134
 406:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 40a:	08 95       	ret
			case 7:
			WriteIns(0x87);
 40c:	87 e8       	ldi	r24, 0x87	; 135
 40e:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 412:	08 95       	ret
			case 8:
			WriteIns(0x88);
 414:	88 e8       	ldi	r24, 0x88	; 136
 416:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 41a:	08 95       	ret
			case 9:
			WriteIns(0x89);
 41c:	89 e8       	ldi	r24, 0x89	; 137
 41e:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 422:	08 95       	ret
			case 10:
			WriteIns(0x8a);
 424:	8a e8       	ldi	r24, 0x8A	; 138
 426:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 42a:	08 95       	ret
			case 11:
			WriteIns(0x8b);
 42c:	8b e8       	ldi	r24, 0x8B	; 139
 42e:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 432:	08 95       	ret
			case 12:
			WriteIns(0x8c);
 434:	8c e8       	ldi	r24, 0x8C	; 140
 436:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 43a:	08 95       	ret
			case 13:
			WriteIns(0x8d);
 43c:	8d e8       	ldi	r24, 0x8D	; 141
 43e:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 442:	08 95       	ret
			case 14:
			WriteIns(0x8e);
 444:	8e e8       	ldi	r24, 0x8E	; 142
 446:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 44a:	08 95       	ret
			case 15:
			WriteIns(0x8f);
 44c:	8f e8       	ldi	r24, 0x8F	; 143
 44e:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 452:	08 95       	ret
		}
		break;
		case 1:
		switch(cell)
 454:	86 2f       	mov	r24, r22
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	80 31       	cpi	r24, 0x10	; 16
 45a:	91 05       	cpc	r25, r1
 45c:	08 f0       	brcs	.+2      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45e:	44 c0       	rjmp	.+136    	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 460:	fc 01       	movw	r30, r24
 462:	e6 5c       	subi	r30, 0xC6	; 198
 464:	ff 4f       	sbci	r31, 0xFF	; 255
 466:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__tablejump2__>
		{
			case 0:
			WriteIns(0xc0);
 46a:	80 ec       	ldi	r24, 0xC0	; 192
 46c:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 470:	08 95       	ret
			case 1:
			WriteIns(0xc1);
 472:	81 ec       	ldi	r24, 0xC1	; 193
 474:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 478:	08 95       	ret
			case 2:
			WriteIns(0xc2);
 47a:	82 ec       	ldi	r24, 0xC2	; 194
 47c:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 480:	08 95       	ret
			case 3:
			WriteIns(0xc3);
 482:	83 ec       	ldi	r24, 0xC3	; 195
 484:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 488:	08 95       	ret
			case 4:
			WriteIns(0xc4);
 48a:	84 ec       	ldi	r24, 0xC4	; 196
 48c:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 490:	08 95       	ret
			case 5:
			WriteIns(0xc5);
 492:	85 ec       	ldi	r24, 0xC5	; 197
 494:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 498:	08 95       	ret
			case 6:
			WriteIns(0xc6);
 49a:	86 ec       	ldi	r24, 0xC6	; 198
 49c:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 4a0:	08 95       	ret
			case 7:
			WriteIns(0xc7);
 4a2:	87 ec       	ldi	r24, 0xC7	; 199
 4a4:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 4a8:	08 95       	ret
			case 8:
			WriteIns(0xc8);
 4aa:	88 ec       	ldi	r24, 0xC8	; 200
 4ac:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 4b0:	08 95       	ret
			case 9:
			WriteIns(0xc9);
 4b2:	89 ec       	ldi	r24, 0xC9	; 201
 4b4:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 4b8:	08 95       	ret
			case 10:
			WriteIns(0xca);
 4ba:	8a ec       	ldi	r24, 0xCA	; 202
 4bc:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 4c0:	08 95       	ret
			case 11:
			WriteIns(0xcb);
 4c2:	8b ec       	ldi	r24, 0xCB	; 203
 4c4:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 4c8:	08 95       	ret
			case 12:
			WriteIns(0xcc);
 4ca:	8c ec       	ldi	r24, 0xCC	; 204
 4cc:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 4d0:	08 95       	ret
			case 13:
			WriteIns(0xcd);
 4d2:	8d ec       	ldi	r24, 0xCD	; 205
 4d4:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 4d8:	08 95       	ret
			case 14:
			WriteIns(0xce);
 4da:	8e ec       	ldi	r24, 0xCE	; 206
 4dc:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
			break;
 4e0:	08 95       	ret
			case 15:
			WriteIns(0xcf);
 4e2:	8f ec       	ldi	r24, 0xCF	; 207
 4e4:	0e 94 81 00 	call	0x102	; 0x102 <WriteIns>
 4e8:	08 95       	ret

000004ea <Temp_Read>:
#include "StdTypes.h"
#include "ADC.h"
#include "Sensors.h"
u16 Temp_Read(void)
{
	u16 volt=ADC_Read_volt(LM35_CH);
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 27 03 	call	0x64e	; 0x64e <ADC_Read_volt>
	u16 Temp =volt;
	return Temp;
}
 4f0:	08 95       	ret

000004f2 <main>:
#define F_CPU     8000000
#include <util/delay.h>
#define Global_Enable   sei
#include "Keypad.h"
int main(void)
{
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <main+0x6>
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
	/*Replace with your application code */
	DIO_Init();
 4fc:	0e 94 bd 04 	call	0x97a	; 0x97a <DIO_Init>
	LCD_Init();
 500:	0e 94 41 01 	call	0x282	; 0x282 <LCD_Init>
	KEYPAD_Init();
 504:	0e 94 70 00 	call	0xe0	; 0xe0 <KEYPAD_Init>
	ADC_Init(VREF_AVCC,ADC_SCALER_64);
 508:	66 e0       	ldi	r22, 0x06	; 6
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ADC_Init>
	Temp_FilterInit();
 510:	0e 94 69 00 	call	0xd2	; 0xd2 <Temp_FilterInit>
	Timer1_OCRB1Mode(OCRB_NON_INVERTING);
	TIMER2_Init(TIMER2_FASTPWM_MODE,TIMER2_SCALER_8);
	TIMER2_OC2Mode(OC2_NON_INVERTING);
	Four_UltraSonic_Init();
	TIMER2_OV_InterruptEnable();*/
	URAT_INIT();
 514:	0e 94 58 06 	call	0xcb0	; 0xcb0 <URAT_INIT>
	SPI_Init(Slave);
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	0e 94 48 05 	call	0xa90	; 0xa90 <SPI_Init>
//   	URAT_SendStringAshync("kkked");

 /* u8 c=0,REC,SEN='A';*/
    u16 Temp=0,c=0,u;
	//u8 T=0;
	Temp=Temp_Read();
 51e:	0e 94 75 02 	call	0x4ea	; 0x4ea <Temp_Read>
	Temp/=10;
 522:	9c 01       	movw	r18, r24
 524:	ad ec       	ldi	r26, 0xCD	; 205
 526:	bc ec       	ldi	r27, 0xCC	; 204
 528:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__umulhisi3>
 52c:	96 95       	lsr	r25
 52e:	87 95       	ror	r24
 530:	96 95       	lsr	r25
 532:	87 95       	ror	r24
 534:	96 95       	lsr	r25
 536:	87 95       	ror	r24
    SPI_Send((u8)Temp);
 538:	0e 94 60 05 	call	0xac0	; 0xac0 <SPI_Send>
// 	URAT_SendStringAshync("jjj");
// 	_delay_ms(3);
//   	URAT_SendStringAshync("kkked");

 /* u8 c=0,REC,SEN='A';*/
    u16 Temp=0,c=0,u;
 53c:	00 e0       	ldi	r16, 0x00	; 0
 53e:	10 e0       	ldi	r17, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <main+0x54>
	LCD_SetCursor(1,0);
	LCD_WriteNumber(c);
	c++;
	if(c==10)
	{
		c=0;
 542:	00 e0       	ldi	r16, 0x00	; 0
 544:	10 e0       	ldi	r17, 0x00	; 0
	Temp=Temp_Read();
	Temp/=10;
    SPI_Send((u8)Temp);
  	while(1)             
 	{ 
  Temp=Temp_Read();
 546:	0e 94 75 02 	call	0x4ea	; 0x4ea <Temp_Read>
  Temp/=10;
 54a:	9c 01       	movw	r18, r24
 54c:	ad ec       	ldi	r26, 0xCD	; 205
 54e:	bc ec       	ldi	r27, 0xCC	; 204
 550:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__umulhisi3>
 554:	7c 01       	movw	r14, r24
 556:	f6 94       	lsr	r15
 558:	e7 94       	ror	r14
 55a:	f6 94       	lsr	r15
 55c:	e7 94       	ror	r14
 55e:	f6 94       	lsr	r15
 560:	e7 94       	ror	r14
 LCD_WriteString("               ");
 562:	80 e6       	ldi	r24, 0x60	; 96
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_WriteString>
 LCD_SetCursor(0,0);
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_SetCursor>
 LCD_WriteString("TEMP:");
 572:	80 e7       	ldi	r24, 0x70	; 112
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_WriteString>
 LCD_WriteNumber(Temp);
 57a:	b7 01       	movw	r22, r14
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_WriteNumber>
 LCD_WriteChar('C');
 584:	83 e4       	ldi	r24, 0x43	; 67
 586:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_WriteChar>
   if(SPI_Receieveperodic(&u))
 58a:	ce 01       	movw	r24, r28
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	0e 94 55 05 	call	0xaaa	; 0xaaa <SPI_Receieveperodic>
 592:	88 23       	and	r24, r24
 594:	19 f0       	breq	.+6      	; 0x59c <main+0xaa>
   {
	   
	 SPI_Send((u8)Temp);
 596:	8e 2d       	mov	r24, r14
 598:	0e 94 60 05 	call	0xac0	; 0xac0 <SPI_Send>
   }
	if(Temp>50)
 59c:	83 e3       	ldi	r24, 0x33	; 51
 59e:	e8 16       	cp	r14, r24
 5a0:	f1 04       	cpc	r15, r1
 5a2:	70 f0       	brcs	.+28     	; 0x5c0 <main+0xce>
	{
		DIO_WritePin(PINC0,HIGH);
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	80 e1       	ldi	r24, 0x10	; 16
 5a8:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ac:	8f ec       	ldi	r24, 0xCF	; 207
 5ae:	97 e0       	ldi	r25, 0x07	; 7
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <main+0xbe>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <main+0xc4>
 5b6:	00 00       	nop
		_delay_ms(1);
		DIO_WritePin(PINC0,LOW);
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	80 e1       	ldi	r24, 0x10	; 16
 5bc:	0e 94 38 04 	call	0x870	; 0x870 <DIO_WritePin>
	}  
	LCD_SetCursor(1,0);
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_SetCursor>
	LCD_WriteNumber(c);
 5c8:	b8 01       	movw	r22, r16
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_WriteNumber>
	c++;
 5d2:	0f 5f       	subi	r16, 0xFF	; 255
 5d4:	1f 4f       	sbci	r17, 0xFF	; 255
	if(c==10)
 5d6:	0a 30       	cpi	r16, 0x0A	; 10
 5d8:	11 05       	cpc	r17, r1
 5da:	09 f0       	breq	.+2      	; 0x5de <main+0xec>
 5dc:	b4 cf       	rjmp	.-152    	; 0x546 <main+0x54>
 5de:	b1 cf       	rjmp	.-158    	; 0x542 <main+0x50>

000005e0 <ADC_Init>:
u8 static ADCFlag=1;

void ADC_Init(ADC_Vref_type vref,ADC_Prescaler_type scaler)
{
	/* clock*/ 
	scaler=scaler&0x07; //00000111
 5e0:	67 70       	andi	r22, 0x07	; 7
	ADCSRA=ADCSRA&0xf8; //11111000
 5e2:	96 b1       	in	r25, 0x06	; 6
 5e4:	98 7f       	andi	r25, 0xF8	; 248
 5e6:	96 b9       	out	0x06, r25	; 6
	ADCSRA=ADCSRA|scaler;
 5e8:	96 b1       	in	r25, 0x06	; 6
 5ea:	69 2b       	or	r22, r25
 5ec:	66 b9       	out	0x06, r22	; 6
	/* volt ref */
	switch(vref)
 5ee:	81 30       	cpi	r24, 0x01	; 1
 5f0:	59 f0       	breq	.+22     	; 0x608 <ADC_Init+0x28>
 5f2:	18 f0       	brcs	.+6      	; 0x5fa <ADC_Init+0x1a>
 5f4:	82 30       	cpi	r24, 0x02	; 2
 5f6:	79 f0       	breq	.+30     	; 0x616 <ADC_Init+0x36>
 5f8:	14 c0       	rjmp	.+40     	; 0x622 <ADC_Init+0x42>
	{
		case VREF_AREF:
		CLR_BIT(ADMUX,REFS0);
 5fa:	87 b1       	in	r24, 0x07	; 7
 5fc:	8f 7b       	andi	r24, 0xBF	; 191
 5fe:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX,REFS1);
 600:	87 b1       	in	r24, 0x07	; 7
 602:	8f 77       	andi	r24, 0x7F	; 127
 604:	87 b9       	out	0x07, r24	; 7
		break;
 606:	0d c0       	rjmp	.+26     	; 0x622 <ADC_Init+0x42>
		case VREF_AVCC:
		SET_BIT(ADMUX,REFS0);
 608:	87 b1       	in	r24, 0x07	; 7
 60a:	80 64       	ori	r24, 0x40	; 64
 60c:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX,REFS1);
 60e:	87 b1       	in	r24, 0x07	; 7
 610:	8f 77       	andi	r24, 0x7F	; 127
 612:	87 b9       	out	0x07, r24	; 7
		break;
 614:	06 c0       	rjmp	.+12     	; 0x622 <ADC_Init+0x42>
		case VREF_256:
		SET_BIT(ADMUX,REFS0);
 616:	87 b1       	in	r24, 0x07	; 7
 618:	80 64       	ori	r24, 0x40	; 64
 61a:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,REFS1);
 61c:	87 b1       	in	r24, 0x07	; 7
 61e:	80 68       	ori	r24, 0x80	; 128
 620:	87 b9       	out	0x07, r24	; 7
		break;	
	}
	
	CLR_BIT(ADMUX,ADLAR);
 622:	87 b1       	in	r24, 0x07	; 7
 624:	8f 7d       	andi	r24, 0xDF	; 223
 626:	87 b9       	out	0x07, r24	; 7
	/* ADC ENABLE*/
	SET_BIT(ADCSRA,ADEN);
 628:	86 b1       	in	r24, 0x06	; 6
 62a:	80 68       	ori	r24, 0x80	; 128
 62c:	86 b9       	out	0x06, r24	; 6
 62e:	08 95       	ret

00000630 <ADC_Read>:
}
u16 ADC_Read(ADC_Channel_type ch)
{
	u16 adc,t1,t2,y,x;
	 //select channel
		ADMUX=ADMUX&0xe0;
 630:	97 b1       	in	r25, 0x07	; 7
 632:	90 7e       	andi	r25, 0xE0	; 224
 634:	97 b9       	out	0x07, r25	; 7
		ch=ch&0x1f;
 636:	8f 71       	andi	r24, 0x1F	; 31
		ADMUX=ADMUX|ch;	
 638:	97 b1       	in	r25, 0x07	; 7
 63a:	89 2b       	or	r24, r25
 63c:	87 b9       	out	0x07, r24	; 7
	 //start conversion 
	SET_BIT(ADCSRA,ADSC);
 63e:	86 b1       	in	r24, 0x06	; 6
 640:	80 64       	ori	r24, 0x40	; 64
 642:	86 b9       	out	0x06, r24	; 6
	//w8 until finish
	while(READ_BIT(ADCSRA,ADSC));	
 644:	36 99       	sbic	0x06, 6	; 6
 646:	fe cf       	rjmp	.-4      	; 0x644 <ADC_Read+0x14>
	 //get read 
	adc=ADC;
 648:	84 b1       	in	r24, 0x04	; 4
 64a:	95 b1       	in	r25, 0x05	; 5
	return adc;

}
 64c:	08 95       	ret

0000064e <ADC_Read_volt>:

u16 ADC_Read_volt(ADC_Channel_type ch)
{
	u16 volt,adc ;
	
	adc=(ADC_Read(ch));
 64e:	0e 94 18 03 	call	0x630	; 0x630 <ADC_Read>
	volt=(adc*VREF)/1024;
 652:	9c 01       	movw	r18, r24
 654:	a8 e8       	ldi	r26, 0x88	; 136
 656:	b3 e1       	ldi	r27, 0x13	; 19
 658:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__umulhisi3>
 65c:	dc 01       	movw	r26, r24
 65e:	cb 01       	movw	r24, r22
 660:	07 2e       	mov	r0, r23
 662:	7a e0       	ldi	r23, 0x0A	; 10
 664:	b6 95       	lsr	r27
 666:	a7 95       	ror	r26
 668:	97 95       	ror	r25
 66a:	87 95       	ror	r24
 66c:	7a 95       	dec	r23
 66e:	d1 f7       	brne	.-12     	; 0x664 <ADC_Read_volt+0x16>
 670:	70 2d       	mov	r23, r0

	
	return volt ;
	

}
 672:	08 95       	ret

00000674 <DIO_InitPin>:
	}
	
	return volt;
	
	
}
 674:	98 2f       	mov	r25, r24
 676:	96 95       	lsr	r25
 678:	96 95       	lsr	r25
 67a:	96 95       	lsr	r25
 67c:	87 70       	andi	r24, 0x07	; 7
 67e:	68 30       	cpi	r22, 0x08	; 8
 680:	09 f4       	brne	.+2      	; 0x684 <DIO_InitPin+0x10>
 682:	56 c0       	rjmp	.+172    	; 0x730 <DIO_InitPin+0xbc>
 684:	69 30       	cpi	r22, 0x09	; 9
 686:	09 f4       	brne	.+2      	; 0x68a <DIO_InitPin+0x16>
 688:	a3 c0       	rjmp	.+326    	; 0x7d0 <DIO_InitPin+0x15c>
 68a:	67 30       	cpi	r22, 0x07	; 7
 68c:	09 f0       	breq	.+2      	; 0x690 <DIO_InitPin+0x1c>
 68e:	ef c0       	rjmp	.+478    	; 0x86e <__stack+0xf>
 690:	91 30       	cpi	r25, 0x01	; 1
 692:	c1 f0       	breq	.+48     	; 0x6c4 <DIO_InitPin+0x50>
 694:	28 f0       	brcs	.+10     	; 0x6a0 <DIO_InitPin+0x2c>
 696:	92 30       	cpi	r25, 0x02	; 2
 698:	39 f1       	breq	.+78     	; 0x6e8 <DIO_InitPin+0x74>
 69a:	93 30       	cpi	r25, 0x03	; 3
 69c:	b9 f1       	breq	.+110    	; 0x70c <DIO_InitPin+0x98>
 69e:	08 95       	ret
 6a0:	4a b3       	in	r20, 0x1a	; 26
 6a2:	21 e0       	ldi	r18, 0x01	; 1
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	b9 01       	movw	r22, r18
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_InitPin+0x3a>
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	8a 95       	dec	r24
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_InitPin+0x36>
 6b2:	cb 01       	movw	r24, r22
 6b4:	94 2f       	mov	r25, r20
 6b6:	98 2b       	or	r25, r24
 6b8:	9a bb       	out	0x1a, r25	; 26
 6ba:	9b b3       	in	r25, 0x1b	; 27
 6bc:	80 95       	com	r24
 6be:	89 23       	and	r24, r25
 6c0:	8b bb       	out	0x1b, r24	; 27
 6c2:	08 95       	ret
 6c4:	47 b3       	in	r20, 0x17	; 23
 6c6:	21 e0       	ldi	r18, 0x01	; 1
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	b9 01       	movw	r22, r18
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_InitPin+0x5e>
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	8a 95       	dec	r24
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_InitPin+0x5a>
 6d6:	cb 01       	movw	r24, r22
 6d8:	94 2f       	mov	r25, r20
 6da:	98 2b       	or	r25, r24
 6dc:	97 bb       	out	0x17, r25	; 23
 6de:	98 b3       	in	r25, 0x18	; 24
 6e0:	80 95       	com	r24
 6e2:	89 23       	and	r24, r25
 6e4:	88 bb       	out	0x18, r24	; 24
 6e6:	08 95       	ret
 6e8:	44 b3       	in	r20, 0x14	; 20
 6ea:	21 e0       	ldi	r18, 0x01	; 1
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	b9 01       	movw	r22, r18
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_InitPin+0x82>
 6f2:	66 0f       	add	r22, r22
 6f4:	77 1f       	adc	r23, r23
 6f6:	8a 95       	dec	r24
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_InitPin+0x7e>
 6fa:	cb 01       	movw	r24, r22
 6fc:	94 2f       	mov	r25, r20
 6fe:	98 2b       	or	r25, r24
 700:	94 bb       	out	0x14, r25	; 20
 702:	95 b3       	in	r25, 0x15	; 21
 704:	80 95       	com	r24
 706:	89 23       	and	r24, r25
 708:	85 bb       	out	0x15, r24	; 21
 70a:	08 95       	ret
 70c:	41 b3       	in	r20, 0x11	; 17
 70e:	21 e0       	ldi	r18, 0x01	; 1
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	b9 01       	movw	r22, r18
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_InitPin+0xa6>
 716:	66 0f       	add	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	8a 95       	dec	r24
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_InitPin+0xa2>
 71e:	cb 01       	movw	r24, r22
 720:	94 2f       	mov	r25, r20
 722:	98 2b       	or	r25, r24
 724:	91 bb       	out	0x11, r25	; 17
 726:	92 b3       	in	r25, 0x12	; 18
 728:	80 95       	com	r24
 72a:	89 23       	and	r24, r25
 72c:	82 bb       	out	0x12, r24	; 18
 72e:	08 95       	ret
 730:	91 30       	cpi	r25, 0x01	; 1
 732:	c1 f0       	breq	.+48     	; 0x764 <DIO_InitPin+0xf0>
 734:	28 f0       	brcs	.+10     	; 0x740 <DIO_InitPin+0xcc>
 736:	92 30       	cpi	r25, 0x02	; 2
 738:	39 f1       	breq	.+78     	; 0x788 <DIO_InitPin+0x114>
 73a:	93 30       	cpi	r25, 0x03	; 3
 73c:	b9 f1       	breq	.+110    	; 0x7ac <DIO_InitPin+0x138>
 73e:	08 95       	ret
 740:	4a b3       	in	r20, 0x1a	; 26
 742:	21 e0       	ldi	r18, 0x01	; 1
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	b9 01       	movw	r22, r18
 748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_InitPin+0xda>
 74a:	66 0f       	add	r22, r22
 74c:	77 1f       	adc	r23, r23
 74e:	8a 95       	dec	r24
 750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_InitPin+0xd6>
 752:	cb 01       	movw	r24, r22
 754:	80 95       	com	r24
 756:	94 2f       	mov	r25, r20
 758:	98 23       	and	r25, r24
 75a:	9a bb       	out	0x1a, r25	; 26
 75c:	9b b3       	in	r25, 0x1b	; 27
 75e:	89 23       	and	r24, r25
 760:	8b bb       	out	0x1b, r24	; 27
 762:	08 95       	ret
 764:	47 b3       	in	r20, 0x17	; 23
 766:	21 e0       	ldi	r18, 0x01	; 1
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	b9 01       	movw	r22, r18
 76c:	02 c0       	rjmp	.+4      	; 0x772 <DIO_InitPin+0xfe>
 76e:	66 0f       	add	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	8a 95       	dec	r24
 774:	e2 f7       	brpl	.-8      	; 0x76e <DIO_InitPin+0xfa>
 776:	cb 01       	movw	r24, r22
 778:	80 95       	com	r24
 77a:	94 2f       	mov	r25, r20
 77c:	98 23       	and	r25, r24
 77e:	97 bb       	out	0x17, r25	; 23
 780:	98 b3       	in	r25, 0x18	; 24
 782:	89 23       	and	r24, r25
 784:	88 bb       	out	0x18, r24	; 24
 786:	08 95       	ret
 788:	44 b3       	in	r20, 0x14	; 20
 78a:	21 e0       	ldi	r18, 0x01	; 1
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	b9 01       	movw	r22, r18
 790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_InitPin+0x122>
 792:	66 0f       	add	r22, r22
 794:	77 1f       	adc	r23, r23
 796:	8a 95       	dec	r24
 798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_InitPin+0x11e>
 79a:	cb 01       	movw	r24, r22
 79c:	80 95       	com	r24
 79e:	94 2f       	mov	r25, r20
 7a0:	98 23       	and	r25, r24
 7a2:	94 bb       	out	0x14, r25	; 20
 7a4:	95 b3       	in	r25, 0x15	; 21
 7a6:	89 23       	and	r24, r25
 7a8:	85 bb       	out	0x15, r24	; 21
 7aa:	08 95       	ret
 7ac:	41 b3       	in	r20, 0x11	; 17
 7ae:	21 e0       	ldi	r18, 0x01	; 1
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	b9 01       	movw	r22, r18
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_InitPin+0x146>
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	8a 95       	dec	r24
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_InitPin+0x142>
 7be:	cb 01       	movw	r24, r22
 7c0:	80 95       	com	r24
 7c2:	94 2f       	mov	r25, r20
 7c4:	98 23       	and	r25, r24
 7c6:	91 bb       	out	0x11, r25	; 17
 7c8:	92 b3       	in	r25, 0x12	; 18
 7ca:	89 23       	and	r24, r25
 7cc:	82 bb       	out	0x12, r24	; 18
 7ce:	08 95       	ret
 7d0:	91 30       	cpi	r25, 0x01	; 1
 7d2:	c1 f0       	breq	.+48     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7d4:	28 f0       	brcs	.+10     	; 0x7e0 <DIO_InitPin+0x16c>
 7d6:	92 30       	cpi	r25, 0x02	; 2
 7d8:	39 f1       	breq	.+78     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 7da:	93 30       	cpi	r25, 0x03	; 3
 7dc:	b9 f1       	breq	.+110    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 7de:	08 95       	ret
 7e0:	4a b3       	in	r20, 0x1a	; 26
 7e2:	21 e0       	ldi	r18, 0x01	; 1
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	b9 01       	movw	r22, r18
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_InitPin+0x17a>
 7ea:	66 0f       	add	r22, r22
 7ec:	77 1f       	adc	r23, r23
 7ee:	8a 95       	dec	r24
 7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_InitPin+0x176>
 7f2:	cb 01       	movw	r24, r22
 7f4:	96 2f       	mov	r25, r22
 7f6:	90 95       	com	r25
 7f8:	94 23       	and	r25, r20
 7fa:	9a bb       	out	0x1a, r25	; 26
 7fc:	9b b3       	in	r25, 0x1b	; 27
 7fe:	89 2b       	or	r24, r25
 800:	8b bb       	out	0x1b, r24	; 27
 802:	08 95       	ret
 804:	47 b3       	in	r20, 0x17	; 23
 806:	21 e0       	ldi	r18, 0x01	; 1
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	b9 01       	movw	r22, r18
 80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80e:	66 0f       	add	r22, r22
 810:	77 1f       	adc	r23, r23
 812:	8a 95       	dec	r24
 814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 816:	cb 01       	movw	r24, r22
 818:	96 2f       	mov	r25, r22
 81a:	90 95       	com	r25
 81c:	94 23       	and	r25, r20
 81e:	97 bb       	out	0x17, r25	; 23
 820:	98 b3       	in	r25, 0x18	; 24
 822:	89 2b       	or	r24, r25
 824:	88 bb       	out	0x18, r24	; 24
 826:	08 95       	ret
 828:	44 b3       	in	r20, 0x14	; 20
 82a:	21 e0       	ldi	r18, 0x01	; 1
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	b9 01       	movw	r22, r18
 830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 832:	66 0f       	add	r22, r22
 834:	77 1f       	adc	r23, r23
 836:	8a 95       	dec	r24
 838:	e2 f7       	brpl	.-8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 83a:	cb 01       	movw	r24, r22
 83c:	96 2f       	mov	r25, r22
 83e:	90 95       	com	r25
 840:	94 23       	and	r25, r20
 842:	94 bb       	out	0x14, r25	; 20
 844:	95 b3       	in	r25, 0x15	; 21
 846:	89 2b       	or	r24, r25
 848:	85 bb       	out	0x15, r24	; 21
 84a:	08 95       	ret
 84c:	41 b3       	in	r20, 0x11	; 17
 84e:	21 e0       	ldi	r18, 0x01	; 1
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	b9 01       	movw	r22, r18
 854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 856:	66 0f       	add	r22, r22
 858:	77 1f       	adc	r23, r23
 85a:	8a 95       	dec	r24
 85c:	e2 f7       	brpl	.-8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 85e:	cb 01       	movw	r24, r22
 860:	96 2f       	mov	r25, r22
 862:	90 95       	com	r25
 864:	94 23       	and	r25, r20
 866:	91 bb       	out	0x11, r25	; 17
 868:	92 b3       	in	r25, 0x12	; 18
 86a:	89 2b       	or	r24, r25
 86c:	82 bb       	out	0x12, r24	; 18
 86e:	08 95       	ret

00000870 <DIO_WritePin>:
 870:	98 2f       	mov	r25, r24
 872:	96 95       	lsr	r25
 874:	96 95       	lsr	r25
 876:	96 95       	lsr	r25
 878:	87 70       	andi	r24, 0x07	; 7
 87a:	61 30       	cpi	r22, 0x01	; 1
 87c:	e1 f5       	brne	.+120    	; 0x8f6 <DIO_WritePin+0x86>
 87e:	91 30       	cpi	r25, 0x01	; 1
 880:	99 f0       	breq	.+38     	; 0x8a8 <DIO_WritePin+0x38>
 882:	28 f0       	brcs	.+10     	; 0x88e <DIO_WritePin+0x1e>
 884:	92 30       	cpi	r25, 0x02	; 2
 886:	e9 f0       	breq	.+58     	; 0x8c2 <DIO_WritePin+0x52>
 888:	93 30       	cpi	r25, 0x03	; 3
 88a:	41 f1       	breq	.+80     	; 0x8dc <DIO_WritePin+0x6c>
 88c:	08 95       	ret
 88e:	4b b3       	in	r20, 0x1b	; 27
 890:	21 e0       	ldi	r18, 0x01	; 1
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	b9 01       	movw	r22, r18
 896:	02 c0       	rjmp	.+4      	; 0x89c <DIO_WritePin+0x2c>
 898:	66 0f       	add	r22, r22
 89a:	77 1f       	adc	r23, r23
 89c:	8a 95       	dec	r24
 89e:	e2 f7       	brpl	.-8      	; 0x898 <DIO_WritePin+0x28>
 8a0:	cb 01       	movw	r24, r22
 8a2:	84 2b       	or	r24, r20
 8a4:	8b bb       	out	0x1b, r24	; 27
 8a6:	08 95       	ret
 8a8:	48 b3       	in	r20, 0x18	; 24
 8aa:	21 e0       	ldi	r18, 0x01	; 1
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	b9 01       	movw	r22, r18
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <DIO_WritePin+0x46>
 8b2:	66 0f       	add	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	8a 95       	dec	r24
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <DIO_WritePin+0x42>
 8ba:	cb 01       	movw	r24, r22
 8bc:	84 2b       	or	r24, r20
 8be:	88 bb       	out	0x18, r24	; 24
 8c0:	08 95       	ret
 8c2:	45 b3       	in	r20, 0x15	; 21
 8c4:	21 e0       	ldi	r18, 0x01	; 1
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	b9 01       	movw	r22, r18
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <DIO_WritePin+0x60>
 8cc:	66 0f       	add	r22, r22
 8ce:	77 1f       	adc	r23, r23
 8d0:	8a 95       	dec	r24
 8d2:	e2 f7       	brpl	.-8      	; 0x8cc <DIO_WritePin+0x5c>
 8d4:	cb 01       	movw	r24, r22
 8d6:	84 2b       	or	r24, r20
 8d8:	85 bb       	out	0x15, r24	; 21
 8da:	08 95       	ret
 8dc:	42 b3       	in	r20, 0x12	; 18
 8de:	21 e0       	ldi	r18, 0x01	; 1
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	b9 01       	movw	r22, r18
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <DIO_WritePin+0x7a>
 8e6:	66 0f       	add	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	8a 95       	dec	r24
 8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <DIO_WritePin+0x76>
 8ee:	cb 01       	movw	r24, r22
 8f0:	84 2b       	or	r24, r20
 8f2:	82 bb       	out	0x12, r24	; 18
 8f4:	08 95       	ret
 8f6:	61 11       	cpse	r22, r1
 8f8:	3f c0       	rjmp	.+126    	; 0x978 <DIO_WritePin+0x108>
 8fa:	91 30       	cpi	r25, 0x01	; 1
 8fc:	a1 f0       	breq	.+40     	; 0x926 <DIO_WritePin+0xb6>
 8fe:	28 f0       	brcs	.+10     	; 0x90a <DIO_WritePin+0x9a>
 900:	92 30       	cpi	r25, 0x02	; 2
 902:	f9 f0       	breq	.+62     	; 0x942 <DIO_WritePin+0xd2>
 904:	93 30       	cpi	r25, 0x03	; 3
 906:	59 f1       	breq	.+86     	; 0x95e <DIO_WritePin+0xee>
 908:	08 95       	ret
 90a:	4b b3       	in	r20, 0x1b	; 27
 90c:	21 e0       	ldi	r18, 0x01	; 1
 90e:	30 e0       	ldi	r19, 0x00	; 0
 910:	b9 01       	movw	r22, r18
 912:	02 c0       	rjmp	.+4      	; 0x918 <DIO_WritePin+0xa8>
 914:	66 0f       	add	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	8a 95       	dec	r24
 91a:	e2 f7       	brpl	.-8      	; 0x914 <DIO_WritePin+0xa4>
 91c:	cb 01       	movw	r24, r22
 91e:	80 95       	com	r24
 920:	84 23       	and	r24, r20
 922:	8b bb       	out	0x1b, r24	; 27
 924:	08 95       	ret
 926:	48 b3       	in	r20, 0x18	; 24
 928:	21 e0       	ldi	r18, 0x01	; 1
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	b9 01       	movw	r22, r18
 92e:	02 c0       	rjmp	.+4      	; 0x934 <DIO_WritePin+0xc4>
 930:	66 0f       	add	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	8a 95       	dec	r24
 936:	e2 f7       	brpl	.-8      	; 0x930 <DIO_WritePin+0xc0>
 938:	cb 01       	movw	r24, r22
 93a:	80 95       	com	r24
 93c:	84 23       	and	r24, r20
 93e:	88 bb       	out	0x18, r24	; 24
 940:	08 95       	ret
 942:	45 b3       	in	r20, 0x15	; 21
 944:	21 e0       	ldi	r18, 0x01	; 1
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	b9 01       	movw	r22, r18
 94a:	02 c0       	rjmp	.+4      	; 0x950 <DIO_WritePin+0xe0>
 94c:	66 0f       	add	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	8a 95       	dec	r24
 952:	e2 f7       	brpl	.-8      	; 0x94c <DIO_WritePin+0xdc>
 954:	cb 01       	movw	r24, r22
 956:	80 95       	com	r24
 958:	84 23       	and	r24, r20
 95a:	85 bb       	out	0x15, r24	; 21
 95c:	08 95       	ret
 95e:	42 b3       	in	r20, 0x12	; 18
 960:	21 e0       	ldi	r18, 0x01	; 1
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	b9 01       	movw	r22, r18
 966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_WritePin+0xfc>
 968:	66 0f       	add	r22, r22
 96a:	77 1f       	adc	r23, r23
 96c:	8a 95       	dec	r24
 96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_WritePin+0xf8>
 970:	cb 01       	movw	r24, r22
 972:	80 95       	com	r24
 974:	84 23       	and	r24, r20
 976:	82 bb       	out	0x12, r24	; 18
 978:	08 95       	ret

0000097a <DIO_Init>:

void DIO_Init(void)
{
 97a:	cf 93       	push	r28
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 97c:	c0 e0       	ldi	r28, 0x00	; 0
 97e:	09 c0       	rjmp	.+18     	; 0x992 <DIO_Init+0x18>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
 980:	ec 2f       	mov	r30, r28
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	ea 58       	subi	r30, 0x8A	; 138
 986:	ff 4f       	sbci	r31, 0xFF	; 255
 988:	60 81       	ld	r22, Z
 98a:	8c 2f       	mov	r24, r28
 98c:	0e 94 3a 03 	call	0x674	; 0x674 <DIO_InitPin>
}

void DIO_Init(void)
{
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 990:	cf 5f       	subi	r28, 0xFF	; 255
 992:	c0 32       	cpi	r28, 0x20	; 32
 994:	a8 f3       	brcs	.-22     	; 0x980 <DIO_Init+0x6>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
	}

}
 996:	cf 91       	pop	r28
 998:	08 95       	ret

0000099a <__vector_1>:


/*******************************ISR********************************/

ISR(INT0_vect)
{
 99a:	1f 92       	push	r1
 99c:	0f 92       	push	r0
 99e:	0f b6       	in	r0, 0x3f	; 63
 9a0:	0f 92       	push	r0
 9a2:	11 24       	eor	r1, r1
 9a4:	2f 93       	push	r18
 9a6:	3f 93       	push	r19
 9a8:	4f 93       	push	r20
 9aa:	5f 93       	push	r21
 9ac:	6f 93       	push	r22
 9ae:	7f 93       	push	r23
 9b0:	8f 93       	push	r24
 9b2:	9f 93       	push	r25
 9b4:	af 93       	push	r26
 9b6:	bf 93       	push	r27
 9b8:	ef 93       	push	r30
 9ba:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 9bc:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <INT0_Fptr>
 9c0:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <INT0_Fptr+0x1>
 9c4:	30 97       	sbiw	r30, 0x00	; 0
 9c6:	09 f0       	breq	.+2      	; 0x9ca <__vector_1+0x30>
	{
		INT0_Fptr();
 9c8:	09 95       	icall
	}
}
 9ca:	ff 91       	pop	r31
 9cc:	ef 91       	pop	r30
 9ce:	bf 91       	pop	r27
 9d0:	af 91       	pop	r26
 9d2:	9f 91       	pop	r25
 9d4:	8f 91       	pop	r24
 9d6:	7f 91       	pop	r23
 9d8:	6f 91       	pop	r22
 9da:	5f 91       	pop	r21
 9dc:	4f 91       	pop	r20
 9de:	3f 91       	pop	r19
 9e0:	2f 91       	pop	r18
 9e2:	0f 90       	pop	r0
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	0f 90       	pop	r0
 9e8:	1f 90       	pop	r1
 9ea:	18 95       	reti

000009ec <__vector_2>:
ISR(INT1_vect)
{
 9ec:	1f 92       	push	r1
 9ee:	0f 92       	push	r0
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	0f 92       	push	r0
 9f4:	11 24       	eor	r1, r1
 9f6:	2f 93       	push	r18
 9f8:	3f 93       	push	r19
 9fa:	4f 93       	push	r20
 9fc:	5f 93       	push	r21
 9fe:	6f 93       	push	r22
 a00:	7f 93       	push	r23
 a02:	8f 93       	push	r24
 a04:	9f 93       	push	r25
 a06:	af 93       	push	r26
 a08:	bf 93       	push	r27
 a0a:	ef 93       	push	r30
 a0c:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 a0e:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <INT1_Fptr>
 a12:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <INT1_Fptr+0x1>
 a16:	30 97       	sbiw	r30, 0x00	; 0
 a18:	09 f0       	breq	.+2      	; 0xa1c <__vector_2+0x30>
	{
		INT1_Fptr();
 a1a:	09 95       	icall
	}
}
 a1c:	ff 91       	pop	r31
 a1e:	ef 91       	pop	r30
 a20:	bf 91       	pop	r27
 a22:	af 91       	pop	r26
 a24:	9f 91       	pop	r25
 a26:	8f 91       	pop	r24
 a28:	7f 91       	pop	r23
 a2a:	6f 91       	pop	r22
 a2c:	5f 91       	pop	r21
 a2e:	4f 91       	pop	r20
 a30:	3f 91       	pop	r19
 a32:	2f 91       	pop	r18
 a34:	0f 90       	pop	r0
 a36:	0f be       	out	0x3f, r0	; 63
 a38:	0f 90       	pop	r0
 a3a:	1f 90       	pop	r1
 a3c:	18 95       	reti

00000a3e <__vector_3>:
ISR(INT2_vect)
{
 a3e:	1f 92       	push	r1
 a40:	0f 92       	push	r0
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	0f 92       	push	r0
 a46:	11 24       	eor	r1, r1
 a48:	2f 93       	push	r18
 a4a:	3f 93       	push	r19
 a4c:	4f 93       	push	r20
 a4e:	5f 93       	push	r21
 a50:	6f 93       	push	r22
 a52:	7f 93       	push	r23
 a54:	8f 93       	push	r24
 a56:	9f 93       	push	r25
 a58:	af 93       	push	r26
 a5a:	bf 93       	push	r27
 a5c:	ef 93       	push	r30
 a5e:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 a60:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <INT2_Fptr>
 a64:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <INT2_Fptr+0x1>
 a68:	30 97       	sbiw	r30, 0x00	; 0
 a6a:	09 f0       	breq	.+2      	; 0xa6e <__vector_3+0x30>
	{
		INT2_Fptr();
 a6c:	09 95       	icall
	}
 a6e:	ff 91       	pop	r31
 a70:	ef 91       	pop	r30
 a72:	bf 91       	pop	r27
 a74:	af 91       	pop	r26
 a76:	9f 91       	pop	r25
 a78:	8f 91       	pop	r24
 a7a:	7f 91       	pop	r23
 a7c:	6f 91       	pop	r22
 a7e:	5f 91       	pop	r21
 a80:	4f 91       	pop	r20
 a82:	3f 91       	pop	r19
 a84:	2f 91       	pop	r18
 a86:	0f 90       	pop	r0
 a88:	0f be       	out	0x3f, r0	; 63
 a8a:	0f 90       	pop	r0
 a8c:	1f 90       	pop	r1
 a8e:	18 95       	reti

00000a90 <SPI_Init>:
	return 0;
}
u8 SPI_Receieve()
{
	return SPDR;
}
 a90:	81 11       	cpse	r24, r1
 a92:	04 c0       	rjmp	.+8      	; 0xa9c <SPI_Init+0xc>
 a94:	8d b1       	in	r24, 0x0d	; 13
 a96:	80 61       	ori	r24, 0x10	; 16
 a98:	8d b9       	out	0x0d, r24	; 13
 a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <SPI_Init+0x12>
 a9c:	8d b1       	in	r24, 0x0d	; 13
 a9e:	8f 7e       	andi	r24, 0xEF	; 239
 aa0:	8d b9       	out	0x0d, r24	; 13
 aa2:	8d b1       	in	r24, 0x0d	; 13
 aa4:	80 64       	ori	r24, 0x40	; 64
 aa6:	8d b9       	out	0x0d, r24	; 13
 aa8:	08 95       	ret

00000aaa <SPI_Receieveperodic>:
 aaa:	fc 01       	movw	r30, r24
 aac:	9e b1       	in	r25, 0x0e	; 14
 aae:	89 2f       	mov	r24, r25
 ab0:	88 1f       	adc	r24, r24
 ab2:	88 27       	eor	r24, r24
 ab4:	88 1f       	adc	r24, r24
 ab6:	19 f0       	breq	.+6      	; 0xabe <SPI_Receieveperodic+0x14>
 ab8:	8f b1       	in	r24, 0x0f	; 15
 aba:	80 83       	st	Z, r24
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	08 95       	ret

00000ac0 <SPI_Send>:
void SPI_Send(u8 data)
{
	SPDR=data;
 ac0:	8f b9       	out	0x0f, r24	; 15
 ac2:	08 95       	ret

00000ac4 <__vector_11>:
{
Timer2_OVF_Fptr=LocalFptr;
}
void Timer2_OC2_SetCallBack(void(*LocalFptr)(void))
{
	Timer2_OC2_Fptr=LocalFptr;
 ac4:	1f 92       	push	r1
 ac6:	0f 92       	push	r0
 ac8:	0f b6       	in	r0, 0x3f	; 63
 aca:	0f 92       	push	r0
 acc:	11 24       	eor	r1, r1
 ace:	2f 93       	push	r18
 ad0:	3f 93       	push	r19
 ad2:	4f 93       	push	r20
 ad4:	5f 93       	push	r21
 ad6:	6f 93       	push	r22
 ad8:	7f 93       	push	r23
 ada:	8f 93       	push	r24
 adc:	9f 93       	push	r25
 ade:	af 93       	push	r26
 ae0:	bf 93       	push	r27
 ae2:	ef 93       	push	r30
 ae4:	ff 93       	push	r31
 ae6:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <Timer0_OVF_Fptr>
 aea:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <Timer0_OVF_Fptr+0x1>
 aee:	30 97       	sbiw	r30, 0x00	; 0
 af0:	09 f0       	breq	.+2      	; 0xaf4 <__vector_11+0x30>
 af2:	09 95       	icall
 af4:	ff 91       	pop	r31
 af6:	ef 91       	pop	r30
 af8:	bf 91       	pop	r27
 afa:	af 91       	pop	r26
 afc:	9f 91       	pop	r25
 afe:	8f 91       	pop	r24
 b00:	7f 91       	pop	r23
 b02:	6f 91       	pop	r22
 b04:	5f 91       	pop	r21
 b06:	4f 91       	pop	r20
 b08:	3f 91       	pop	r19
 b0a:	2f 91       	pop	r18
 b0c:	0f 90       	pop	r0
 b0e:	0f be       	out	0x3f, r0	; 63
 b10:	0f 90       	pop	r0
 b12:	1f 90       	pop	r1
 b14:	18 95       	reti

00000b16 <__vector_9>:
 b16:	1f 92       	push	r1
 b18:	0f 92       	push	r0
 b1a:	0f b6       	in	r0, 0x3f	; 63
 b1c:	0f 92       	push	r0
 b1e:	11 24       	eor	r1, r1
 b20:	2f 93       	push	r18
 b22:	3f 93       	push	r19
 b24:	4f 93       	push	r20
 b26:	5f 93       	push	r21
 b28:	6f 93       	push	r22
 b2a:	7f 93       	push	r23
 b2c:	8f 93       	push	r24
 b2e:	9f 93       	push	r25
 b30:	af 93       	push	r26
 b32:	bf 93       	push	r27
 b34:	ef 93       	push	r30
 b36:	ff 93       	push	r31
 b38:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <Timer1_OVF_Fptr>
 b3c:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <Timer1_OVF_Fptr+0x1>
 b40:	30 97       	sbiw	r30, 0x00	; 0
 b42:	09 f0       	breq	.+2      	; 0xb46 <__vector_9+0x30>
 b44:	09 95       	icall
 b46:	ff 91       	pop	r31
 b48:	ef 91       	pop	r30
 b4a:	bf 91       	pop	r27
 b4c:	af 91       	pop	r26
 b4e:	9f 91       	pop	r25
 b50:	8f 91       	pop	r24
 b52:	7f 91       	pop	r23
 b54:	6f 91       	pop	r22
 b56:	5f 91       	pop	r21
 b58:	4f 91       	pop	r20
 b5a:	3f 91       	pop	r19
 b5c:	2f 91       	pop	r18
 b5e:	0f 90       	pop	r0
 b60:	0f be       	out	0x3f, r0	; 63
 b62:	0f 90       	pop	r0
 b64:	1f 90       	pop	r1
 b66:	18 95       	reti

00000b68 <__vector_7>:
 b68:	1f 92       	push	r1
 b6a:	0f 92       	push	r0
 b6c:	0f b6       	in	r0, 0x3f	; 63
 b6e:	0f 92       	push	r0
 b70:	11 24       	eor	r1, r1
 b72:	2f 93       	push	r18
 b74:	3f 93       	push	r19
 b76:	4f 93       	push	r20
 b78:	5f 93       	push	r21
 b7a:	6f 93       	push	r22
 b7c:	7f 93       	push	r23
 b7e:	8f 93       	push	r24
 b80:	9f 93       	push	r25
 b82:	af 93       	push	r26
 b84:	bf 93       	push	r27
 b86:	ef 93       	push	r30
 b88:	ff 93       	push	r31
 b8a:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <Timer1_OCA_Fptr>
 b8e:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <Timer1_OCA_Fptr+0x1>
 b92:	30 97       	sbiw	r30, 0x00	; 0
 b94:	09 f0       	breq	.+2      	; 0xb98 <__vector_7+0x30>
 b96:	09 95       	icall
 b98:	ff 91       	pop	r31
 b9a:	ef 91       	pop	r30
 b9c:	bf 91       	pop	r27
 b9e:	af 91       	pop	r26
 ba0:	9f 91       	pop	r25
 ba2:	8f 91       	pop	r24
 ba4:	7f 91       	pop	r23
 ba6:	6f 91       	pop	r22
 ba8:	5f 91       	pop	r21
 baa:	4f 91       	pop	r20
 bac:	3f 91       	pop	r19
 bae:	2f 91       	pop	r18
 bb0:	0f 90       	pop	r0
 bb2:	0f be       	out	0x3f, r0	; 63
 bb4:	0f 90       	pop	r0
 bb6:	1f 90       	pop	r1
 bb8:	18 95       	reti

00000bba <__vector_8>:
 bba:	1f 92       	push	r1
 bbc:	0f 92       	push	r0
 bbe:	0f b6       	in	r0, 0x3f	; 63
 bc0:	0f 92       	push	r0
 bc2:	11 24       	eor	r1, r1
 bc4:	2f 93       	push	r18
 bc6:	3f 93       	push	r19
 bc8:	4f 93       	push	r20
 bca:	5f 93       	push	r21
 bcc:	6f 93       	push	r22
 bce:	7f 93       	push	r23
 bd0:	8f 93       	push	r24
 bd2:	9f 93       	push	r25
 bd4:	af 93       	push	r26
 bd6:	bf 93       	push	r27
 bd8:	ef 93       	push	r30
 bda:	ff 93       	push	r31
 bdc:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <Timer1_OCB_Fptr>
 be0:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <Timer1_OCB_Fptr+0x1>
 be4:	30 97       	sbiw	r30, 0x00	; 0
 be6:	09 f0       	breq	.+2      	; 0xbea <__vector_8+0x30>
 be8:	09 95       	icall
 bea:	ff 91       	pop	r31
 bec:	ef 91       	pop	r30
 bee:	bf 91       	pop	r27
 bf0:	af 91       	pop	r26
 bf2:	9f 91       	pop	r25
 bf4:	8f 91       	pop	r24
 bf6:	7f 91       	pop	r23
 bf8:	6f 91       	pop	r22
 bfa:	5f 91       	pop	r21
 bfc:	4f 91       	pop	r20
 bfe:	3f 91       	pop	r19
 c00:	2f 91       	pop	r18
 c02:	0f 90       	pop	r0
 c04:	0f be       	out	0x3f, r0	; 63
 c06:	0f 90       	pop	r0
 c08:	1f 90       	pop	r1
 c0a:	18 95       	reti

00000c0c <__vector_6>:
 c0c:	1f 92       	push	r1
 c0e:	0f 92       	push	r0
 c10:	0f b6       	in	r0, 0x3f	; 63
 c12:	0f 92       	push	r0
 c14:	11 24       	eor	r1, r1
 c16:	2f 93       	push	r18
 c18:	3f 93       	push	r19
 c1a:	4f 93       	push	r20
 c1c:	5f 93       	push	r21
 c1e:	6f 93       	push	r22
 c20:	7f 93       	push	r23
 c22:	8f 93       	push	r24
 c24:	9f 93       	push	r25
 c26:	af 93       	push	r26
 c28:	bf 93       	push	r27
 c2a:	ef 93       	push	r30
 c2c:	ff 93       	push	r31
 c2e:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <Timer1_ICU_Fptr>
 c32:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <Timer1_ICU_Fptr+0x1>
 c36:	30 97       	sbiw	r30, 0x00	; 0
 c38:	09 f0       	breq	.+2      	; 0xc3c <__vector_6+0x30>
 c3a:	09 95       	icall
 c3c:	ff 91       	pop	r31
 c3e:	ef 91       	pop	r30
 c40:	bf 91       	pop	r27
 c42:	af 91       	pop	r26
 c44:	9f 91       	pop	r25
 c46:	8f 91       	pop	r24
 c48:	7f 91       	pop	r23
 c4a:	6f 91       	pop	r22
 c4c:	5f 91       	pop	r21
 c4e:	4f 91       	pop	r20
 c50:	3f 91       	pop	r19
 c52:	2f 91       	pop	r18
 c54:	0f 90       	pop	r0
 c56:	0f be       	out	0x3f, r0	; 63
 c58:	0f 90       	pop	r0
 c5a:	1f 90       	pop	r1
 c5c:	18 95       	reti

00000c5e <__vector_5>:
}
/*********************************Timer 2 ISR functions*********************************************/
ISR(TIMER2_OVF_vect)
{
 c5e:	1f 92       	push	r1
 c60:	0f 92       	push	r0
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	0f 92       	push	r0
 c66:	11 24       	eor	r1, r1
 c68:	2f 93       	push	r18
 c6a:	3f 93       	push	r19
 c6c:	4f 93       	push	r20
 c6e:	5f 93       	push	r21
 c70:	6f 93       	push	r22
 c72:	7f 93       	push	r23
 c74:	8f 93       	push	r24
 c76:	9f 93       	push	r25
 c78:	af 93       	push	r26
 c7a:	bf 93       	push	r27
 c7c:	ef 93       	push	r30
 c7e:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
 c80:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <Timer2_OVF_Fptr>
 c84:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <Timer2_OVF_Fptr+0x1>
 c88:	30 97       	sbiw	r30, 0x00	; 0
 c8a:	09 f0       	breq	.+2      	; 0xc8e <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
 c8c:	09 95       	icall
	}
}
 c8e:	ff 91       	pop	r31
 c90:	ef 91       	pop	r30
 c92:	bf 91       	pop	r27
 c94:	af 91       	pop	r26
 c96:	9f 91       	pop	r25
 c98:	8f 91       	pop	r24
 c9a:	7f 91       	pop	r23
 c9c:	6f 91       	pop	r22
 c9e:	5f 91       	pop	r21
 ca0:	4f 91       	pop	r20
 ca2:	3f 91       	pop	r19
 ca4:	2f 91       	pop	r18
 ca6:	0f 90       	pop	r0
 ca8:	0f be       	out	0x3f, r0	; 63
 caa:	0f 90       	pop	r0
 cac:	1f 90       	pop	r1
 cae:	18 95       	reti

00000cb0 <URAT_INIT>:
{
	URAT_RX_Fptr=localfptr;
}
void UART_TX_SetCallBack(void(*LocalFptr)(void))
{
	URAT_TX_Fptr=LocalFptr;
 cb0:	83 e3       	ldi	r24, 0x33	; 51
 cb2:	89 b9       	out	0x09, r24	; 9
 cb4:	8b b1       	in	r24, 0x0b	; 11
 cb6:	8d 7f       	andi	r24, 0xFD	; 253
 cb8:	8b b9       	out	0x0b, r24	; 11
 cba:	8a b1       	in	r24, 0x0a	; 10
 cbc:	88 60       	ori	r24, 0x08	; 8
 cbe:	8a b9       	out	0x0a, r24	; 10
 cc0:	8a b1       	in	r24, 0x0a	; 10
 cc2:	80 61       	ori	r24, 0x10	; 16
 cc4:	8a b9       	out	0x0a, r24	; 10
 cc6:	08 95       	ret

00000cc8 <__vector_13>:
}
ISR(UART_RX_vect)
{
 cc8:	1f 92       	push	r1
 cca:	0f 92       	push	r0
 ccc:	0f b6       	in	r0, 0x3f	; 63
 cce:	0f 92       	push	r0
 cd0:	11 24       	eor	r1, r1
 cd2:	2f 93       	push	r18
 cd4:	3f 93       	push	r19
 cd6:	4f 93       	push	r20
 cd8:	5f 93       	push	r21
 cda:	6f 93       	push	r22
 cdc:	7f 93       	push	r23
 cde:	8f 93       	push	r24
 ce0:	9f 93       	push	r25
 ce2:	af 93       	push	r26
 ce4:	bf 93       	push	r27
 ce6:	ef 93       	push	r30
 ce8:	ff 93       	push	r31
	if(URAT_RX_Fptr!=NULLPTR)
 cea:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <URAT_RX_Fptr>
 cee:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <URAT_RX_Fptr+0x1>
 cf2:	30 97       	sbiw	r30, 0x00	; 0
 cf4:	09 f0       	breq	.+2      	; 0xcf8 <__vector_13+0x30>
	{
		URAT_RX_Fptr();
 cf6:	09 95       	icall
	}
}
 cf8:	ff 91       	pop	r31
 cfa:	ef 91       	pop	r30
 cfc:	bf 91       	pop	r27
 cfe:	af 91       	pop	r26
 d00:	9f 91       	pop	r25
 d02:	8f 91       	pop	r24
 d04:	7f 91       	pop	r23
 d06:	6f 91       	pop	r22
 d08:	5f 91       	pop	r21
 d0a:	4f 91       	pop	r20
 d0c:	3f 91       	pop	r19
 d0e:	2f 91       	pop	r18
 d10:	0f 90       	pop	r0
 d12:	0f be       	out	0x3f, r0	; 63
 d14:	0f 90       	pop	r0
 d16:	1f 90       	pop	r1
 d18:	18 95       	reti

00000d1a <__vector_15>:
ISR(UART_TX_vect)
{
 d1a:	1f 92       	push	r1
 d1c:	0f 92       	push	r0
 d1e:	0f b6       	in	r0, 0x3f	; 63
 d20:	0f 92       	push	r0
 d22:	11 24       	eor	r1, r1
 d24:	2f 93       	push	r18
 d26:	3f 93       	push	r19
 d28:	4f 93       	push	r20
 d2a:	5f 93       	push	r21
 d2c:	6f 93       	push	r22
 d2e:	7f 93       	push	r23
 d30:	8f 93       	push	r24
 d32:	9f 93       	push	r25
 d34:	af 93       	push	r26
 d36:	bf 93       	push	r27
 d38:	ef 93       	push	r30
 d3a:	ff 93       	push	r31
	if(URAT_TX_Fptr!=NULLPTR)
 d3c:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <URAT_TX_Fptr>
 d40:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <URAT_TX_Fptr+0x1>
 d44:	30 97       	sbiw	r30, 0x00	; 0
 d46:	09 f0       	breq	.+2      	; 0xd4a <__vector_15+0x30>
	{
		URAT_TX_Fptr();
 d48:	09 95       	icall
	}
}
 d4a:	ff 91       	pop	r31
 d4c:	ef 91       	pop	r30
 d4e:	bf 91       	pop	r27
 d50:	af 91       	pop	r26
 d52:	9f 91       	pop	r25
 d54:	8f 91       	pop	r24
 d56:	7f 91       	pop	r23
 d58:	6f 91       	pop	r22
 d5a:	5f 91       	pop	r21
 d5c:	4f 91       	pop	r20
 d5e:	3f 91       	pop	r19
 d60:	2f 91       	pop	r18
 d62:	0f 90       	pop	r0
 d64:	0f be       	out	0x3f, r0	; 63
 d66:	0f 90       	pop	r0
 d68:	1f 90       	pop	r1
 d6a:	18 95       	reti

00000d6c <__udivmodsi4>:
 d6c:	a1 e2       	ldi	r26, 0x21	; 33
 d6e:	1a 2e       	mov	r1, r26
 d70:	aa 1b       	sub	r26, r26
 d72:	bb 1b       	sub	r27, r27
 d74:	fd 01       	movw	r30, r26
 d76:	0d c0       	rjmp	.+26     	; 0xd92 <__udivmodsi4_ep>

00000d78 <__udivmodsi4_loop>:
 d78:	aa 1f       	adc	r26, r26
 d7a:	bb 1f       	adc	r27, r27
 d7c:	ee 1f       	adc	r30, r30
 d7e:	ff 1f       	adc	r31, r31
 d80:	a2 17       	cp	r26, r18
 d82:	b3 07       	cpc	r27, r19
 d84:	e4 07       	cpc	r30, r20
 d86:	f5 07       	cpc	r31, r21
 d88:	20 f0       	brcs	.+8      	; 0xd92 <__udivmodsi4_ep>
 d8a:	a2 1b       	sub	r26, r18
 d8c:	b3 0b       	sbc	r27, r19
 d8e:	e4 0b       	sbc	r30, r20
 d90:	f5 0b       	sbc	r31, r21

00000d92 <__udivmodsi4_ep>:
 d92:	66 1f       	adc	r22, r22
 d94:	77 1f       	adc	r23, r23
 d96:	88 1f       	adc	r24, r24
 d98:	99 1f       	adc	r25, r25
 d9a:	1a 94       	dec	r1
 d9c:	69 f7       	brne	.-38     	; 0xd78 <__udivmodsi4_loop>
 d9e:	60 95       	com	r22
 da0:	70 95       	com	r23
 da2:	80 95       	com	r24
 da4:	90 95       	com	r25
 da6:	9b 01       	movw	r18, r22
 da8:	ac 01       	movw	r20, r24
 daa:	bd 01       	movw	r22, r26
 dac:	cf 01       	movw	r24, r30
 dae:	08 95       	ret

00000db0 <__divmodsi4>:
 db0:	05 2e       	mov	r0, r21
 db2:	97 fb       	bst	r25, 7
 db4:	1e f4       	brtc	.+6      	; 0xdbc <__divmodsi4+0xc>
 db6:	00 94       	com	r0
 db8:	0e 94 ef 06 	call	0xdde	; 0xdde <__negsi2>
 dbc:	57 fd       	sbrc	r21, 7
 dbe:	07 d0       	rcall	.+14     	; 0xdce <__divmodsi4_neg2>
 dc0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__udivmodsi4>
 dc4:	07 fc       	sbrc	r0, 7
 dc6:	03 d0       	rcall	.+6      	; 0xdce <__divmodsi4_neg2>
 dc8:	4e f4       	brtc	.+18     	; 0xddc <__divmodsi4_exit>
 dca:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__negsi2>

00000dce <__divmodsi4_neg2>:
 dce:	50 95       	com	r21
 dd0:	40 95       	com	r20
 dd2:	30 95       	com	r19
 dd4:	21 95       	neg	r18
 dd6:	3f 4f       	sbci	r19, 0xFF	; 255
 dd8:	4f 4f       	sbci	r20, 0xFF	; 255
 dda:	5f 4f       	sbci	r21, 0xFF	; 255

00000ddc <__divmodsi4_exit>:
 ddc:	08 95       	ret

00000dde <__negsi2>:
 dde:	90 95       	com	r25
 de0:	80 95       	com	r24
 de2:	70 95       	com	r23
 de4:	61 95       	neg	r22
 de6:	7f 4f       	sbci	r23, 0xFF	; 255
 de8:	8f 4f       	sbci	r24, 0xFF	; 255
 dea:	9f 4f       	sbci	r25, 0xFF	; 255
 dec:	08 95       	ret

00000dee <__tablejump2__>:
 dee:	ee 0f       	add	r30, r30
 df0:	ff 1f       	adc	r31, r31
 df2:	05 90       	lpm	r0, Z+
 df4:	f4 91       	lpm	r31, Z
 df6:	e0 2d       	mov	r30, r0
 df8:	09 94       	ijmp

00000dfa <__umulhisi3>:
 dfa:	a2 9f       	mul	r26, r18
 dfc:	b0 01       	movw	r22, r0
 dfe:	b3 9f       	mul	r27, r19
 e00:	c0 01       	movw	r24, r0
 e02:	a3 9f       	mul	r26, r19
 e04:	70 0d       	add	r23, r0
 e06:	81 1d       	adc	r24, r1
 e08:	11 24       	eor	r1, r1
 e0a:	91 1d       	adc	r25, r1
 e0c:	b2 9f       	mul	r27, r18
 e0e:	70 0d       	add	r23, r0
 e10:	81 1d       	adc	r24, r1
 e12:	11 24       	eor	r1, r1
 e14:	91 1d       	adc	r25, r1
 e16:	08 95       	ret

00000e18 <_exit>:
 e18:	f8 94       	cli

00000e1a <__stop_program>:
 e1a:	ff cf       	rjmp	.-2      	; 0xe1a <__stop_program>
