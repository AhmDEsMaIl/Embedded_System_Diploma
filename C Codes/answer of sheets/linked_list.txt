//////////////////////////////Double_list_functions//////////////////////////////
#include"hea.h"


d_list *create_double_list ()
{
    d_list *x;
    x=malloc(sizeof(d_list));
    x->head=0;
    x->tail=0;
    x->size_l=0;
    return x;
}
node_l* create_node (d_list*l, int data)
{
    node_l *new_node=malloc(sizeof(node_l));
    new_node->data=data;
    new_node->next=0;
    new_node->prev=0;
    /*new_node->data=data;
    new_node->next=l->tail;
    l->tail=new_node;
    new_node->prev=l->head;
    l->head=new_node;
    l->size_l++;*/
    return new_node;
}
void add_insert_first (d_list*l, int data)
{
    node_l*x=create_node(l,data);
    if(l->head==0||l->tail==0 )
    {
        l->head=x;
        l->tail=x;
        l->size_l++;
    }
    else
    {
        x->next=l->head;
        l->head->prev=x;
        l->head =x;
        l->size_l++;
    }
}
void add_insert_last (d_list *l,int data)
{
    node_l*y=create_node(l,data);
    if(l->head==0|| l->tail==0)
    {
        l->head=y;
        l->tail=y;
        l->size_l++;
    }
    else
    {
        l->head->next=y;
        y->prev=l->head;
        l->tail=y;
        l->size_l++;
    }
}
void  insert_node (d_list*l, int prev,int new_data)
{
    if(l->head=0)
    {
        return;
    }
    else
    {
        node_l* current =l->head;
        if(current!=0)
        {
            if(current->data==prev)
            {
                current->data==new_data;
            }
            current=current->next;
        }
    }
}
void delete_node (d_list*l,int data)
{
    node_l* current =l->head;

    if(l->size_l==1)
    {
        l->head=0;
        l->tail=0;
        l->size_l=0;
        free(l->head);
    }
    else if(l->size_l==2)
    {
        if(l->head->data==data)
        {
            l->head->next=0;
            l->tail->prev=0;
            l->head=l->tail;
            free(l->head);


        }
        else if(l->tail->data==data)
        {

            l->head->next=0;
            l->head->next->prev=0;
            l->tail=l->head;
            free(l->tail);
        }
    }
    else
    {
        while(current!=0)
        {
            if(current->next==data)
            {
                current->prev->next=current->next;
                current->next->prev=current->prev;
                current->next=0;
                current->prev=0;
                free(current);
            }
        }
    }
}

void print_d(d_list*l)
{
    if(l->head==0)
    {
        return 0;
    }
    else
    {
        node_l*current=l->head;
        while(current!=0)
        {
            printf("  %d  ",current->data);
            current =current->next;
        }
        printf("\n   %d   \n",l->size_l);

    }
}
/////////////////////////////////Double_list_header////////////////
typedef struct node
 {
     int data;
     struct node* next;
     struct node *prev;
 }node_l;


 typedef struct
 {
     node_l* head;
     node_l*tail;
     int size_l;
 }d_list;

 typedef d_list*     List    ;

 d_list *create_double_list ();
node_l* create_node (d_list*l,int data);
void print_d(d_list*l);
void add_insert_last (d_list *l,int data);

